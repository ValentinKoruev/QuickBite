// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickBite.Repositories;

#nullable disable

namespace QuickBite.Migrations
{
    [DbContext(typeof(QuickBiteDbContext))]
    [Migration("20241213153213_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuickBite.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CourierId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("QuickBite.Entities.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("QuickBite.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Master Burger Pizza",
                            Price = 15m,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -2,
                            Name = "Chik Chirik Pizza",
                            Price = 12m,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -3,
                            Name = "Vegetarian Pizza",
                            Price = 8m,
                            RestaurantId = -1
                        },
                        new
                        {
                            Id = -4,
                            Name = "Zinger Burger",
                            Price = 10m,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -5,
                            Name = "Bonburger",
                            Price = 5m,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -6,
                            Name = "Bucket 30 Hot",
                            Price = 25m,
                            RestaurantId = -2
                        },
                        new
                        {
                            Id = -7,
                            Name = "McCrispy",
                            Price = 10m,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -8,
                            Name = "McNuggets",
                            Price = 8m,
                            RestaurantId = -3
                        },
                        new
                        {
                            Id = -9,
                            Name = "Hamburger",
                            Price = 8m,
                            RestaurantId = -3
                        });
                });

            modelBuilder.Entity("QuickBite.Entities.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Address = "Sofia, zh.k. Lyulin 6, bul. Pancho Vladigerov 6",
                            Name = "Domino's Pizza"
                        },
                        new
                        {
                            Id = -2,
                            Address = "Sofia, zh.k. Lyulin 8, bul. Tsaritsa Yoanna 72",
                            Name = "KFC"
                        },
                        new
                        {
                            Id = -3,
                            Address = "Sofia, zh.k. Lulin 10, bul. Evropa 1",
                            Name = "McDonald's"
                        });
                });

            modelBuilder.Entity("QuickBite.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Email = "valentinkoruev@gmail.com",
                            FirstName = "Valentin",
                            LastName = "Koruev",
                            Password = "pass123",
                            Type = 1,
                            Username = "valentinkoruev5"
                        },
                        new
                        {
                            Id = -2,
                            Email = "petar444@gmail.com",
                            FirstName = "Petar",
                            LastName = "Petrov",
                            Password = "pass123",
                            Type = 2,
                            Username = "petar444"
                        },
                        new
                        {
                            Id = -3,
                            Email = "takeout@kfc.bg",
                            FirstName = "KFC",
                            Password = "pass123",
                            Type = 3,
                            Username = "kfc"
                        },
                        new
                        {
                            Id = -4,
                            Email = "ivanivanov@gmail.com",
                            FirstName = "Ivan",
                            LastName = "Ivanov",
                            Password = "pass123",
                            Type = 9999,
                            Username = "ivanov123"
                        });
                });

            modelBuilder.Entity("QuickBite.Entities.Order", b =>
                {
                    b.HasOne("QuickBite.Entities.User", "Courier")
                        .WithMany()
                        .HasForeignKey("CourierId");

                    b.HasOne("QuickBite.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickBite.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuickBite.Entities.OrderProduct", b =>
                {
                    b.HasOne("QuickBite.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickBite.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("QuickBite.Entities.Product", b =>
                {
                    b.HasOne("QuickBite.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });
#pragma warning restore 612, 618
        }
    }
}
